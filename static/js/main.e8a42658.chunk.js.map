{"version":3,"sources":["components/Statistics/Statistics.module.css","components/Section/Section.module.css","components/FeedbackOptions/FeedbackOptions.module.css","components/Notification/Notification.module.css","components/FeedbackOptions/FeedbackOptions.js","components/Notification/Notification.js","components/Statistics/Statistics.js","components/Section/Section.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","FeedbackOptions","options","onLeaveFeedback","map","option","index","type","className","s","button","onClick","Notification","message","Statistics","good","neutral","bad","total","positivePercentage","list","item","Section","title","children","box","App","useState","setGood","setNeutral","setBad","items","Object","keys","countTotalFeedback","prevState","Math","round","countPositiveFeedbackPercentage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2IACAA,EAAOC,QAAU,CAAC,KAAO,yBAAyB,KAAO,2B,kBCAzDD,EAAOC,QAAU,CAAC,MAAQ,uBAAuB,IAAM,uB,iBCAvDD,EAAOC,QAAU,CAAC,OAAS,kC,gBCA3BD,EAAOC,QAAU,CAAC,QAAU,gC,qICGb,SAASC,EAAT,GAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBACjD,OAAOD,EAAQE,KAAI,SAACC,EAAQC,GAAT,OACjB,wBAEEC,KAAK,SACLC,UAAWC,IAAEC,OACbC,QAAS,kBAAMR,EAAgBE,IAJjC,SAMGA,GALIC,M,oBCHI,SAASM,EAAT,GAAoC,IAAZC,EAAW,EAAXA,QACrC,OAAO,mBAAGL,UAAWC,IAAEI,QAAhB,SAA0BA,I,oBCApB,SAASC,EAAT,GAMX,IALFC,EAKC,EALDA,KACAC,EAIC,EAJDA,QACAC,EAGC,EAHDA,IACAC,EAEC,EAFDA,MACAC,EACC,EADDA,mBAEA,OACE,8BACGD,EACC,qBAAIV,UAAWC,IAAEW,KAAjB,UACE,qBAAIZ,UAAWC,IAAEY,KAAjB,mBAA8BN,KAC9B,qBAAIP,UAAWC,IAAEY,KAAjB,sBAAiCL,KACjC,qBAAIR,UAAWC,IAAEY,KAAjB,kBAA6BJ,KAC7B,qBAAIT,UAAWC,IAAEY,KAAjB,oBAA+BH,KAC/B,qBAAIV,UAAWC,IAAEY,KAAjB,iCAA4CF,EAA5C,UAGF,cAACP,EAAD,CAAcC,QAAQ,wB,oBCnBf,SAASS,EAAT,GAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACvC,OACE,kCACE,sBAAKhB,UAAWC,IAAEgB,IAAlB,UACE,oBAAIjB,UAAWC,IAAEc,MAAjB,SAAyBA,IACxBC,OCJM,SAASE,IAAO,IAAD,EACJC,mBAAS,GADL,mBACrBZ,EADqB,KACfa,EADe,OAEED,mBAAS,GAFX,mBAErBX,EAFqB,KAEZa,EAFY,OAGNF,mBAAS,GAHH,mBAGrBV,EAHqB,KAGhBa,EAHgB,KAKtBC,EAAQ,CAAEhB,OAAMC,UAASC,OAEzBf,EAAU8B,OAAOC,KAAKF,GAkBtBG,EAAqB,kBAAMnB,EAAOC,EAAUC,GAOlD,OACE,qCACE,cAACK,EAAD,CAASC,MAAM,wBAAf,SACE,cAACtB,EAAD,CAAiBC,QAASA,EAASC,gBA1BlB,SAAAE,GACrB,OAAQA,GACN,IAAK,OACHuB,GAAQ,SAAAO,GAAS,OAAIA,EAAY,KACjC,MACF,IAAK,UACHN,GAAW,SAAAM,GAAS,OAAIA,EAAY,KACpC,MACF,IAAK,MACHL,GAAO,SAAAK,GAAS,OAAIA,EAAY,KAChC,MACF,QACE,aAgBF,cAACb,EAAD,CAASC,MAAM,aAAf,SACE,cAACT,EAAD,CACEC,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOgB,IACPf,mBAhBgC,WACtC,IAAMD,EAAQgB,IACd,OAAOhB,EAAQkB,KAAKC,MAAOtB,EAAOG,EAAS,KAAO,EAcxBoB,UChD9B,IAYeC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACxB,EAAD,MAEFyB,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e8a42658.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Statistics_list__3ryVc\",\"item\":\"Statistics_item__1xFHD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Section_title__1VKFR\",\"box\":\"Section_box__pv2R8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"FeedbackOptions_button__2bZcI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Notification_message__9m_Nj\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './FeedbackOptions.module.css';\n\nexport default function FeedbackOptions({ options, onLeaveFeedback }) {\n  return options.map((option, index) => (\n    <button\n      key={index}\n      type=\"button\"\n      className={s.button}\n      onClick={() => onLeaveFeedback(option)}\n    >\n      {option}\n    </button>\n  ));\n}\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.string.isRequired),\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './Notification.module.css';\n\nexport default function Notification({ message }) {\n  return <p className={s.message}>{message}</p>;\n}\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Notification from '../Notification/Notification';\nimport s from './Statistics.module.css';\n\nexport default function Statistics({\n  good,\n  neutral,\n  bad,\n  total,\n  positivePercentage,\n}) {\n  return (\n    <div>\n      {total ? (\n        <ul className={s.list}>\n          <li className={s.item}>Good: {good}</li>\n          <li className={s.item}>Neutral: {neutral}</li>\n          <li className={s.item}>Bad: {bad}</li>\n          <li className={s.item}>Total: {total}</li>\n          <li className={s.item}>PositivePercentage: {positivePercentage}%</li>\n        </ul>\n      ) : (\n        <Notification message=\"No feedback given\"></Notification>\n      )}\n    </div>\n  );\n}\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './Section.module.css';\n\nexport default function Section({ title, children }) {\n  return (\n    <section>\n      <div className={s.box}>\n        <h2 className={s.title}>{title}</h2>\n        {children}\n      </div>\n    </section>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\n","import { useState } from 'react';\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOptions';\nimport Statistics from './components/Statistics/Statistics';\nimport Section from './components/Section/Section';\n\nexport default function App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const items = { good, neutral, bad };\n\n  const options = Object.keys(items);\n\n  const handleFeedback = option => {\n    switch (option) {\n      case 'good':\n        setGood(prevState => prevState + 1);\n        break;\n      case 'neutral':\n        setNeutral(prevState => prevState + 1);\n        break;\n      case 'bad':\n        setBad(prevState => prevState + 1);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const countTotalFeedback = () => good + neutral + bad;\n\n  const countPositiveFeedbackPercentage = () => {\n    const total = countTotalFeedback();\n    return total ? Math.round((good / total) * 100) : 0;\n  };\n\n  return (\n    <>\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions options={options} onLeaveFeedback={handleFeedback} />\n      </Section>\n      <Section title=\"Statistics\">\n        <Statistics\n          good={good}\n          neutral={neutral}\n          bad={bad}\n          total={countTotalFeedback()}\n          positivePercentage={countPositiveFeedbackPercentage()}\n        />\n      </Section>\n    </>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}